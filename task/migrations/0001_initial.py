# Generated by Django 4.2.20 on 2025-04-01 15:08

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('setting', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.IntegerField()),
                ('content', models.CharField(max_length=512)),
                ('task_type', models.CharField(default='html', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.IntegerField(verbose_name='任务ID')),
                ('task_name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('last_run', models.DateTimeField(auto_now=True, verbose_name='上次运行时间')),
                ('last_status', models.CharField(default='创建任务成功', max_length=100, verbose_name='上次运行结果')),
                ('task_status', models.IntegerField(choices=[(0, 'run'), (1, 'stop')], default=0, verbose_name='任务状态')),
                ('task_type', models.CharField(default='html', max_length=100, verbose_name='任务类型')),
            ],
            options={
                'verbose_name': '任务状态',
                'verbose_name_plural': '任务状态',
            },
        ),
        migrations.CreateModel(
            name='RSSTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='任务名称')),
                ('url', models.CharField(max_length=1000, validators=[django.core.validators.URLValidator()], verbose_name='RSS地址')),
                ('frequency', models.FloatField(default=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='频率(分钟)')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('notification', models.ManyToManyField(to='setting.notification', verbose_name='通知方式')),
            ],
            options={
                'verbose_name': 'RSS监控',
                'verbose_name_plural': 'RSS监控管理',
            },
        ),
        migrations.CreateModel(
            name='PythonScriptTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('script', models.TextField(help_text='请输入要执行的Python代码，目前只支持python3.6版本的，注意：\n1. result: 用于存储需要发送给用户消息，一定要设置为脚本的全局变量，且是字符串类型\n2. 请自行确保docker环境已经按照了模块，可以联系管理员添加requirements.txt\n', verbose_name='Python脚本代码')),
                ('description', models.TextField(help_text='简单描述一下脚本任务，方便管理的时候知道这个任务是做什么的', verbose_name='脚本描述')),
                ('frequency', models.FloatField(default=5, help_text='一个小时输入：60，一天输入：1440', validators=[django.core.validators.MinValueValidator(0)], verbose_name='执行频率(分钟)')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('timeout', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(0)], verbose_name='超时时间(秒)')),
                ('no_repeat', models.BooleanField(default=True, help_text='如果为True，则只有在和上一次消息不一样的时候才发送', verbose_name='是否去重')),
                ('notification', models.ManyToManyField(to='setting.notification', verbose_name='通知方式')),
            ],
            options={
                'verbose_name': 'Python脚本任务',
                'verbose_name_plural': 'Python脚本任务管理',
            },
        ),
        migrations.CreateModel(
            name='PageMonitorTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='任务名称')),
                ('url', models.CharField(max_length=1000, validators=[django.core.validators.URLValidator()], verbose_name='监控网址')),
                ('selector_type', models.IntegerField(choices=[(0, 'Xpath'), (1, 'Css selector'), (2, 'JsonPath')], default='Xpath', verbose_name='元素选择器类型')),
                ('selector', models.TextField(help_text='一行一个元素选择器，每一行的格式为：选择器名称{选择器内容}，            例如：title{//*[@id="id3"]/h3/text()}。其中 url 为系统保留选择器名称，请不要使用且无法被覆盖', verbose_name='元素选择器')),
                ('template', models.TextField(blank=True, help_text='可为空，自定义发送的通知内容格式，按照选择器名称进行替换，具体示例见文档', verbose_name='消息体模板')),
                ('is_chrome', models.IntegerField(choices=[(0, 'no'), (1, 'yes')], default='no', verbose_name='是否使用无头浏览器')),
                ('frequency', models.FloatField(default=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='频率(分钟)')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('regular_expression', models.CharField(blank=True, help_text='使用正则表达式进一步提取信息，可以留空', max_length=500, verbose_name='正则表达式')),
                ('rule', models.CharField(blank=True, help_text='规则写法参考文档，留空则只简单监控内容变化', max_length=500, verbose_name='监控规则')),
                ('headers', models.TextField(blank=True, help_text='自定义请求头，如可以设置cookie获取登录后才能查看的页面', verbose_name='自定义请求头')),
                ('notification', models.ManyToManyField(to='setting.notification', verbose_name='通知方式')),
            ],
            options={
                'verbose_name': '网页监控',
                'verbose_name_plural': '网页监控管理',
            },
        ),
    ]
